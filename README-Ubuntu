This repository contains the ENTL drivers (entl_drivers) and test codes (entl_test).
The first implementation is done with intel e1000e driver version 3.3.4.
See README.earthcomputing under the directory for compilation and installation.

Bootstrap a new “Jetway” system for development

This note shows the step by step procedure to bring up an Ubuntu system for development with ENTL driver installed on boot time. Following steps are based on Ubuntu wiki “BuildYourOwnKernel” with additional steps to fix problems shown with (*).


1.	Connect the boot flash, HDMI/VGA display, keyboard and mouse then power up and push the button in front
2.	Wait for the selection display and select ‘install linux’
3.	Say yes to the threat that you’ll loose everything.
4.	Follow questions, enter your user name, passed, etc.
5.	Wait for the instruction complete
6.	Click restart now when it’s done
7.	Connect to the Internet somehow. I use physical Ethernet on enp2s0
8.	Open terminal and say “uname –r’ to heck the OS version
9.	Follow the process to recompile linux kernel 
10.	Type: sudo apt-set update
11.	Create dir : mkdir kernel
12.	cd kernel
13.	Edit /etc/apt/sources.list and uncomment all dep-src line (*)
14.	Type: apt-get update (*)
15.	Type: apt-get source linux-image-$(uname -r)
16.	Type: sudo apt-get build-dep linux-image-$(uname -r)
17.	cd to home and create earthcomputing directory: (*)
  cd ~ 
  mkdir earthcomputing 
  cd earthcomputing
18.	get NALLDD from github: (*)
  git clone https://github.com/earthcomputing/NALDD.git
    (use your github id and password)
   Now, type: 
      git branch
   and comfirm git branch is on develop. (If not, type: git checkout develop)
19.	Replace e1000e driver code to ENTL version (*)
   mv ~/kernel/linux-4.4.0/drivers/net/ethernet/intel/e1000e/ ~
   cp -r NALDD/entl_drivers/ e1000e-3.3.4/src ~/kernel/linux-4.4.0/drivers/net/ethernet/intel/e1000e/
20.	Replace Makefile for kernel build (*)
   cd ~/kernel/linux-4.4.0/drivers/net/ethernet/intel/e1000e/ 
   mv Makefile.k Makefile
21.	cd ~/kernel/linux-4.4.0
22.	Type: sudo apt-get install ncurses-dev (*)
23.	Type: 
  chmod a+x debian/rules 
  chmod a+x debian/scripts/*
  chmod a+x debian/scripts/misc/*
  fakeroot debian/rules clean
  fakeroot debian/rules editconfigs
     Configure i386/amd64 related ones (just ‘save’ & ‘exit’)
24.	fakeroot debian/rules clean
25.	fakeroot debian/rules binary-headers binary-generic 
    (This will compile the new kernel, will take long hours)
26.	cd ..
27.	Installing new kernel: 
  sudo dpkg –i linux*.deb
28.	Reboot system to run new kernel
  sudo reboot
